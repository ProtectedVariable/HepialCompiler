
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import ch.hepia.IL.tcp.*;
import ch.hepia.IL.tcp.types.*;
import ch.hepia.IL.tcp.tree.*;
import ch.hepia.IL.tcp.code.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\044\002\000\002\002\004\000\002\002" +
    "\004\000\002\003\007\000\002\004\004\000\002\006\004" +
    "\000\002\006\002\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\007\005\000\002\010\003\000\002" +
    "\010\005\000\002\011\010\000\002\043\005\000\002\012" +
    "\011\000\002\012\010\000\002\013\003\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\006\000" +
    "\002\016\005\000\002\016\007\000\002\017\004\000\002" +
    "\017\006\000\002\045\002\000\002\020\004\000\002\022" +
    "\004\000\002\022\002\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\023\005\000\002" +
    "\024\005\000\002\024\005\000\002\025\006\000\002\026" +
    "\005\000\002\027\011\000\002\030\007\000\002\031\013" +
    "\000\002\032\005\000\002\032\004\000\002\032\005\000" +
    "\002\032\003\000\002\033\003\000\002\033\004\000\002" +
    "\042\004\000\002\042\003\000\002\034\005\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\005\000" +
    "\002\040\006\000\002\041\003\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\006\001\001\002\000\004\002\231\001" +
    "\002\000\004\006\010\001\002\000\012\004\ufffb\011\015" +
    "\017\021\020\016\001\002\000\004\002\000\001\002\000" +
    "\004\063\011\001\002\000\012\004\ufffd\011\ufffd\017\ufffd" +
    "\020\ufffd\001\002\000\014\004\ufff8\011\ufff8\015\ufff8\017" +
    "\ufff8\020\ufff8\001\002\000\004\004\226\001\002\000\004" +
    "\063\uffef\001\002\000\006\017\021\020\016\001\002\000" +
    "\006\021\uffed\063\uffed\001\002\000\004\063\212\001\002" +
    "\000\014\004\ufffa\011\ufffa\015\ufffa\017\ufffa\020\ufffa\001" +
    "\002\000\006\021\uffee\063\uffee\001\002\000\014\004\ufffb" +
    "\011\015\015\ufffb\017\021\020\016\001\002\000\010\014" +
    "\040\017\021\020\016\001\002\000\006\021\026\063\ufff0" +
    "\001\002\000\014\004\ufff9\011\ufff9\015\ufff9\017\ufff9\020" +
    "\ufff9\001\002\000\004\062\030\001\002\000\006\010\033" +
    "\022\034\001\002\000\004\023\031\001\002\000\004\062" +
    "\032\001\002\000\006\010\uffeb\022\uffeb\001\002\000\004" +
    "\062\035\001\002\000\004\063\uffec\001\002\000\004\023" +
    "\036\001\002\000\004\062\037\001\002\000\006\010\uffea" +
    "\022\uffea\001\002\000\012\011\015\015\ufffb\017\021\020" +
    "\016\001\002\000\006\010\044\014\045\001\002\000\004" +
    "\063\043\001\002\000\006\010\uffe9\014\uffe9\001\002\000" +
    "\006\017\021\020\016\001\002\000\012\011\015\015\ufffb" +
    "\017\021\020\016\001\002\000\004\015\047\001\002\000" +
    "\022\016\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\033\uffe7" +
    "\036\uffe7\063\uffe7\001\002\000\034\005\uffe4\016\uffe4\024" +
    "\061\025\055\026\062\027\060\031\uffe4\032\uffe4\033\063" +
    "\035\uffe4\036\070\041\uffe4\063\065\001\002\000\004\016" +
    "\052\001\002\000\014\004\ufff2\011\ufff2\015\ufff2\017\ufff2" +
    "\020\ufff2\001\002\000\034\005\uffe1\016\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1" +
    "\036\uffe1\041\uffe1\063\uffe1\001\002\000\034\005\uffde\016" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\031\uffde\032\uffde" +
    "\033\uffde\035\uffde\036\uffde\041\uffde\063\uffde\001\002\000" +
    "\022\013\106\042\104\043\075\060\102\061\100\062\076" +
    "\063\101\064\177\001\002\000\034\005\uffdd\016\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\035\uffdd\036\uffdd\041\uffdd\063\uffdd\001\002\000\034\005" +
    "\uffe3\016\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\035\uffe3\036\uffe3\041\uffe3\063\uffe3\001" +
    "\002\000\020\013\106\042\104\043\075\060\102\061\100" +
    "\062\076\063\101\001\002\000\004\063\167\001\002\000" +
    "\020\013\106\042\104\043\075\060\102\061\100\062\076" +
    "\063\101\001\002\000\020\013\106\042\104\043\075\060" +
    "\102\061\100\062\076\063\101\001\002\000\034\005\uffe4" +
    "\016\uffe4\024\061\025\055\026\062\027\060\031\uffe4\032" +
    "\uffe4\033\063\035\uffe4\036\070\041\uffe4\063\065\001\002" +
    "\000\006\012\uffd0\021\134\001\002\000\016\005\uffe6\016" +
    "\uffe6\031\uffe6\032\uffe6\035\uffe6\041\uffe6\001\002\000\034" +
    "\005\uffe2\016\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2\041\uffe2\063\uffe2" +
    "\001\002\000\004\063\150\001\002\000\034\005\uffdf\016" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\035\uffdf\036\uffdf\041\uffdf\063\uffdf\001\002\000" +
    "\034\005\uffe0\016\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\035\uffe0\036\uffe0\041\uffe0\063" +
    "\uffe0\001\002\000\004\012\074\001\002\000\020\013\106" +
    "\042\104\043\075\060\102\061\100\062\076\063\101\001" +
    "\002\000\050\007\uffc8\010\uffc8\014\uffc8\022\uffc8\030\uffc8" +
    "\034\uffc8\040\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\001\002\000\050\007\uffc7\010\uffc7\014\uffc7\022" +
    "\uffc7\030\uffc7\034\uffc7\040\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\001\002\000\020\013\106\042\104" +
    "\043\075\060\102\061\100\062\076\063\101\001\002\000" +
    "\020\013\uffba\042\uffba\043\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\001\002\000\054\007\uffd0\010\uffd0\013\135\014" +
    "\uffd0\021\134\022\uffd0\030\uffd0\034\uffd0\040\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\001\002\000\020" +
    "\013\uffb9\042\uffb9\043\uffb9\060\uffb9\061\uffb9\062\uffb9\063" +
    "\uffb9\001\002\000\050\007\uffca\010\uffca\014\uffca\022\uffca" +
    "\030\uffca\034\uffca\040\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\001\002\000\050\007\uffc9\010\uffc9\014" +
    "\uffc9\022\uffc9\030\uffc9\034\uffc9\040\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\001\002\000\034\007\131" +
    "\044\126\045\117\046\121\047\115\050\114\051\112\052" +
    "\123\053\120\054\116\055\113\056\122\057\124\001\002" +
    "\000\020\013\106\042\104\043\075\060\102\061\100\062" +
    "\076\063\101\001\002\000\050\007\uffd1\010\uffd1\014\uffd1" +
    "\022\uffd1\030\uffd1\034\uffd1\040\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\001\002\000\050\007\uffcb\010" +
    "\uffcb\014\uffcb\022\uffcb\030\uffcb\034\uffcb\040\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000\034" +
    "\014\125\044\126\045\117\046\121\047\115\050\114\051" +
    "\112\052\123\053\120\054\116\055\113\056\122\057\124" +
    "\001\002\000\020\013\uffc1\042\uffc1\043\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\001\002\000\020\013\uffbd\042\uffbd" +
    "\043\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\001\002\000" +
    "\020\013\uffc2\042\uffc2\043\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\001\002\000\020\013\uffc3\042\uffc3\043\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\001\002\000\020\013\uffbe" +
    "\042\uffbe\043\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\001" +
    "\002\000\020\013\uffc5\042\uffc5\043\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\001\002\000\020\013\uffbf\042\uffbf\043" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\001\002\000\020" +
    "\013\uffc4\042\uffc4\043\uffc4\060\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\001\002\000\020\013\uffbc\042\uffbc\043\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\001\002\000\020\013\uffc0\042" +
    "\uffc0\043\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\001\002" +
    "\000\020\013\uffbb\042\uffbb\043\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\001\002\000\050\007\uffd2\010\uffd2\014\uffd2" +
    "\022\uffd2\030\uffd2\034\uffd2\040\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\001\002\000\020\013\uffc6\042" +
    "\uffc6\043\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002" +
    "\000\020\013\106\042\104\043\075\060\102\061\100\062" +
    "\076\063\101\001\002\000\050\007\uffd4\010\uffd4\014\uffd4" +
    "\022\uffd4\030\uffd4\034\uffd4\040\uffd4\044\126\045\117\046" +
    "\121\047\115\050\114\051\112\052\123\053\120\054\116" +
    "\055\113\056\122\057\124\001\002\000\034\005\uffd9\016" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\035\uffd9\036\uffd9\041\uffd9\063\uffd9\001\002\000" +
    "\054\007\uffcd\010\uffcd\012\uffcd\014\uffcd\021\134\022\uffcd" +
    "\030\uffcd\034\uffcd\040\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\001\002\000\052\007\uffcf\010\uffcf\012" +
    "\uffcf\014\uffcf\022\uffcf\030\uffcf\034\uffcf\040\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\001\002\000\020" +
    "\013\106\042\104\043\075\060\102\061\100\062\076\063" +
    "\101\001\002\000\022\013\106\014\140\042\104\043\075" +
    "\060\102\061\100\062\076\063\101\001\002\000\006\010" +
    "\141\014\142\001\002\000\036\010\uffb6\014\uffb6\044\126" +
    "\045\117\046\121\047\115\050\114\051\112\052\123\053" +
    "\120\054\116\055\113\056\122\057\124\001\002\000\050" +
    "\007\uffb8\010\uffb8\014\uffb8\022\uffb8\030\uffb8\034\uffb8\040" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\001" +
    "\002\000\020\013\106\042\104\043\075\060\102\061\100" +
    "\062\076\063\101\001\002\000\050\007\uffb7\010\uffb7\014" +
    "\uffb7\022\uffb7\030\uffb7\034\uffb7\040\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\001\002\000\036\010\uffb5" +
    "\014\uffb5\044\126\045\117\046\121\047\115\050\114\051" +
    "\112\052\123\053\120\054\116\055\113\056\122\057\124" +
    "\001\002\000\034\022\145\044\126\045\117\046\121\047" +
    "\115\050\114\051\112\052\123\053\120\054\116\055\113" +
    "\056\122\057\124\001\002\000\054\007\uffcc\010\uffcc\012" +
    "\uffcc\014\uffcc\021\uffcc\022\uffcc\030\uffcc\034\uffcc\040\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\001\002" +
    "\000\052\007\uffce\010\uffce\012\uffce\014\uffce\022\uffce\030" +
    "\uffce\034\uffce\040\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\001\002\000\050\007\uffd3\010\uffd3\014\uffd3" +
    "\022\uffd3\030\uffd3\034\uffd3\040\uffd3\044\126\045\117\046" +
    "\121\047\115\050\114\051\112\052\123\053\120\054\116" +
    "\055\113\056\122\057\124\001\002\000\004\037\151\001" +
    "\002\000\020\013\106\042\104\043\075\060\102\061\100" +
    "\062\076\063\101\001\002\000\034\040\153\044\126\045" +
    "\117\046\121\047\115\050\114\051\112\052\123\053\120" +
    "\054\116\055\113\056\122\057\124\001\002\000\020\013" +
    "\106\042\104\043\075\060\102\061\100\062\076\063\101" +
    "\001\002\000\034\034\155\044\126\045\117\046\121\047" +
    "\115\050\114\051\112\052\123\053\120\054\116\055\113" +
    "\056\122\057\124\001\002\000\022\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\033\uffe7\036\uffe7\041\uffe7\063\uffe7\001\002" +
    "\000\004\041\157\001\002\000\034\005\uffd5\016\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\035\uffd5\036\uffd5\041\uffd5\063\uffd5\001\002\000\016\005" +
    "\uffe5\016\uffe5\031\uffe5\032\uffe5\035\uffe5\041\uffe5\001\002" +
    "\000\034\034\162\044\126\045\117\046\121\047\115\050" +
    "\114\051\112\052\123\053\120\054\116\055\113\056\122" +
    "\057\124\001\002\000\022\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\033\uffe7\035\uffe7\036\uffe7\063\uffe7\001\002\000\004" +
    "\035\164\001\002\000\034\005\uffd6\016\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\036\uffd6\041\uffd6\063\uffd6\001\002\000\034\007\166\044" +
    "\126\045\117\046\121\047\115\050\114\051\112\052\123" +
    "\053\120\054\116\055\113\056\122\057\124\001\002\000" +
    "\034\005\uffd8\016\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\041\uffd8\063" +
    "\uffd8\001\002\000\004\007\170\001\002\000\034\005\uffdc" +
    "\016\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\035\uffdc\036\uffdc\041\uffdc\063\uffdc\001\002" +
    "\000\034\030\172\044\126\045\117\046\121\047\115\050" +
    "\114\051\112\052\123\053\120\054\116\055\113\056\122" +
    "\057\124\001\002\000\022\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\031\uffe7\033\uffe7\036\uffe7\063\uffe7\001\002\000\004" +
    "\031\174\001\002\000\022\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\032\uffe7\033\uffe7\036\uffe7\063\uffe7\001\002\000\004" +
    "\032\176\001\002\000\034\005\uffd7\016\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\035\uffd7" +
    "\036\uffd7\041\uffd7\063\uffd7\001\002\000\004\007\202\001" +
    "\002\000\034\007\201\044\126\045\117\046\121\047\115" +
    "\050\114\051\112\052\123\053\120\054\116\055\113\056" +
    "\122\057\124\001\002\000\034\005\uffdb\016\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\035" +
    "\uffdb\036\uffdb\041\uffdb\063\uffdb\001\002\000\034\005\uffda" +
    "\016\uffda\024\uffda\025\uffda\026\uffda\027\uffda\031\uffda\032" +
    "\uffda\033\uffda\035\uffda\036\uffda\041\uffda\063\uffda\001\002" +
    "\000\004\063\204\001\002\000\006\010\uffe8\014\uffe8\001" +
    "\002\000\004\015\206\001\002\000\022\016\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\033\uffe7\036\uffe7\063\uffe7\001" +
    "\002\000\004\016\210\001\002\000\014\004\ufff1\011\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\001\002\000\006\004\ufffc\015" +
    "\ufffc\001\002\000\010\007\ufff6\010\215\013\216\001\002" +
    "\000\004\007\214\001\002\000\014\004\ufff7\011\ufff7\015" +
    "\ufff7\017\ufff7\020\ufff7\001\002\000\004\063\217\001\002" +
    "\000\010\014\ufff3\017\ufff3\020\ufff3\001\002\000\006\007" +
    "\ufff6\010\215\001\002\000\004\007\ufff5\001\002\000\004" +
    "\063\222\001\002\000\004\012\223\001\002\000\020\013" +
    "\106\042\104\043\075\060\102\061\100\062\076\063\101" +
    "\001\002\000\034\007\225\044\126\045\117\046\121\047" +
    "\115\050\114\051\112\052\123\053\120\054\116\055\113" +
    "\056\122\057\124\001\002\000\014\004\ufff4\011\ufff4\015" +
    "\ufff4\017\ufff4\020\ufff4\001\002\000\022\005\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\033\uffe7\036\uffe7\063\uffe7\001" +
    "\002\000\004\005\230\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\002\003\044\004\001\001\000\002\001" +
    "\001\000\006\003\006\004\005\001\001\000\024\005\021" +
    "\006\012\007\017\011\024\012\011\013\016\014\023\015" +
    "\013\043\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\220\014\023\015\013\001\001" +
    "\000\002\001\001\000\004\010\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\021\006\210\007\017" +
    "\011\024\012\011\013\016\014\023\015\013\043\022\001" +
    "\001\000\012\013\041\014\023\015\013\017\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\021\006\204\007\017\011\024\012\011\013\016\014" +
    "\023\015\013\043\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\202\014\023\015" +
    "\013\001\001\000\024\005\021\006\045\007\017\011\024" +
    "\012\011\013\016\014\023\015\013\043\022\001\001\000" +
    "\002\001\001\000\006\020\050\045\047\001\001\000\026" +
    "\021\063\022\065\023\052\024\066\025\056\026\070\027" +
    "\071\030\053\031\055\033\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\032\177\033\107\035\106\037\076\040\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\032\170\033" +
    "\107\035\106\037\076\040\102\001\001\000\002\001\001" +
    "\000\014\032\164\033\107\035\106\037\076\040\102\001" +
    "\001\000\014\032\160\033\107\035\106\037\076\040\102" +
    "\001\001\000\026\021\063\022\157\023\052\024\066\025" +
    "\056\026\070\027\071\030\053\031\055\033\072\001\001" +
    "\000\006\034\131\042\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\032\104\033\107\035" +
    "\106\037\076\040\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\032\146\033\107\035\106\037\076\040" +
    "\102\001\001\000\002\001\001\000\006\034\131\042\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\126\001\001\000\014\032\110\033\107" +
    "\035\106\037\076\040\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\032\127" +
    "\033\107\035\106\037\076\040\102\001\001\000\004\036" +
    "\126\001\001\000\002\001\001\000\006\034\131\042\145" +
    "\001\001\000\002\001\001\000\014\032\143\033\107\035" +
    "\106\037\076\040\102\001\001\000\016\032\136\033\107" +
    "\035\106\037\076\040\102\041\135\001\001\000\002\001" +
    "\001\000\004\036\126\001\001\000\002\001\001\000\014" +
    "\032\142\033\107\035\106\037\076\040\102\001\001\000" +
    "\002\001\001\000\004\036\126\001\001\000\004\036\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\126\001\001\000\002\001\001\000\014\032\151\033\107" +
    "\035\106\037\076\040\102\001\001\000\004\036\126\001" +
    "\001\000\014\032\153\033\107\035\106\037\076\040\102" +
    "\001\001\000\004\036\126\001\001\000\006\020\155\045" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\126\001\001\000\006\020\162\045" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\126\001\001\000\006\020\172" +
    "\045\047\001\001\000\002\001\001\000\006\020\174\045" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\206\045\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\032\223\033" +
    "\107\035\106\037\076\040\102\001\001\000\004\036\126" +
    "\001\001\000\002\001\001\000\006\020\226\045\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    List<String> identifiers = new LinkedList<>();
    Stack<AbstractTree> treeStack = new Stack<>();
    List<Type> params = new LinkedList<>();
    List<String> pnames = new LinkedList<>();
    Function currentFunction = null;
    EffectiveParameters ep = new EffectiveParameters();
    String fname;
    Block currentBlock;
    Stack<Expression> indices = new Stack<>();
    List<Integer> LimInf = new LinkedList<>();
    List<Integer> LimSup = new LinkedList<>();



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 treeStack.push(new Axiom()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AXIOM ::= NT$0 PROGRAM 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println(SymbolTable.getInstance());
    System.out.println("AbstractTree stack size "+treeStack.size());
    System.out.println(treeStack.peek());
    SemanticAnalyser.getInstance().analyze(treeStack.peek());
    if(ErrorHandler.canGenerate()) {
        String code = ByteCodeGenerator.getInstance().Generate(treeStack.peek());
        try {
            PrintWriter writer = new PrintWriter("hepial.j", "UTF-8");
            writer.println(code);
            writer.close();
            System.out.println("Bytecode was written to hepial.j");
        } catch (IOException e) {
            System.out.println("Coulnd't write bytecode to file...\n"+code);
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AXIOM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= AXIOM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= HEADER DECLARATIONS t_beginPrg BODY t_endPrg 
            {
              Object RESULT =null;
		
    Block b = (Block)treeStack.pop();
    ((Axiom)treeStack.peek()).add("main", b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // HEADER ::= t_prg t_ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("HEADER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATIONS ::= DECLARATION DECLARATIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATIONS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATION ::= DECLAVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= DECLACONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= DECLAFONCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLAVAR ::= TYPE LIDENT t_semicolon 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    for(String str : identifiers) {
        SymbolTable.getInstance().add(new Entry(str), new Variable((Type)t, SymbolTable.getInstance().getBloc(), HepialF.line));
    }
    identifiers.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAVAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LIDENT ::= t_ident 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifiers.add(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIDENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LIDENT ::= t_ident t_coma LIDENT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 identifiers.add(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIDENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLACONST ::= t_const TYPE t_ident t_eq EXPR t_semicolon 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    treeStack.pop();

    if(t instanceof IntType) {
        SymbolTable.getInstance().add(new Entry((String)name), new IntConst(SymbolTable.getInstance().getBloc(), HepialF.line));
    } else if(t instanceof BoolType) {
        SymbolTable.getInstance().add(new Entry((String)name), new BoolConst(SymbolTable.getInstance().getBloc(), HepialF.line));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLACONST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STARTFONC ::= TYPE t_ident t_openpar 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    fname = (String) name;
    currentFunction = new Function((Type)rt, HepialF.line);
    SymbolTable.getInstance().add(new Entry((String)name), currentFunction);
    SymbolTable.getInstance().enterBlock();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STARTFONC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLAFONCT ::= STARTFONC PARAM t_closepar DECLARATIONS t_beginfunc BODY t_endfunc 
            {
              Object RESULT =null;
		
    currentFunction.getParams().addAll(params);
    currentFunction.getPnames().addAll(pnames);
    params.clear();
    pnames.clear();
    SymbolTable.getInstance().exitBlock();
    Block b = (Block)treeStack.pop();
    ((Axiom)treeStack.peek()).add(fname, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAFONCT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLAFONCT ::= STARTFONC t_closepar DECLARATIONS t_beginfunc BODY t_endfunc 
            {
              Object RESULT =null;
		
    SymbolTable.getInstance().exitBlock();
    Block b = (Block)treeStack.pop();
    ((Axiom)treeStack.peek()).add(fname, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAFONCT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= TYPEBASE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = t;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= ARRAY 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = t;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPEBASE ::= t_int 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = IntType.getInstance(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPEBASE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPEBASE ::= t_bool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BoolType.getInstance(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPEBASE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARRAY ::= TYPEBASE t_opensq DIM t_closesq 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    RESULT = new ArrayType((Type)t, LimInf, LimSup);
    LimInf.clear();
    LimSup.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DIM ::= t_intConst t_doubledot t_intConst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int s = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    LimInf.add(i);
    LimSup.add(s);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIM",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DIM ::= DIM t_coma t_intConst t_doubledot t_intConst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int s = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    LimInf.add(i);
    LimSup.add(s);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIM",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAM ::= TYPE t_ident 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 params.add((Type)t); pnames.add((String)name); SymbolTable.getInstance().add(new Entry((String)name), new Variable((Type)t, SymbolTable.getInstance().getBloc(), HepialF.line)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAM ::= PARAM t_coma TYPE t_ident 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 params.add((Type)t); pnames.add((String)name); SymbolTable.getInstance().add(new Entry((String)name), new Variable((Type)t, SymbolTable.getInstance().getBloc(), HepialF.line)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$1 ::= 
            {
              Object RESULT =null;
 currentBlock = new Block(HepialF.line); treeStack.push(currentBlock); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BODY ::= NT$1 INSTRUCTIONS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BODY",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCTIONS ::= INSTR INSTRUCTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCTIONS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTR ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTR ::= WRITE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTR ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTR ::= CONDTITION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTR ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTR ::= WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTR ::= FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // READ ::= t_read t_ident t_semicolon 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(new Read(HepialF.line, new Idf((String)n)));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("READ",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // WRITE ::= t_write EXPR t_semicolon 
            {
              Object RESULT =null;
		
    Expression content = (Expression) treeStack.pop();
    Write write = new Write(HepialF.line, content);
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(write);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRITE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WRITE ::= t_write t_string t_semicolon 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Write write = new Write(HepialF.line, (String)s);
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(write);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRITE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASSIGNMENT ::= ACCESS t_eq EXPR t_semicolon 
            {
              Object RESULT =null;
		
    //EXPR
    Expression source = (Expression) (treeStack.pop());
    //ACCESS
    Expression dest = (Expression) (treeStack.pop());
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(new Assignment(HepialF.line, source, dest));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RETURN ::= t_return EXPR t_semicolon 
            {
              Object RESULT =null;
		
    Expression e = (Expression) treeStack.pop();
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(new Return(HepialF.line, e));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDTITION ::= t_if EXPR t_then BODY t_else BODY t_endif 
            {
              Object RESULT =null;
		
    Block _else = (Block) treeStack.pop();
    Block then = (Block) treeStack.pop();
    Expression cnd = (Expression) treeStack.pop();

    Condition cond = new Condition(HepialF.line, cnd, then.getInstructions(), _else.getInstructions());
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(cond);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDTITION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WHILE ::= t_while EXPR t_do BODY t_endwhile 
            {
              Object RESULT =null;
		
    Block body = (Block) treeStack.pop();
    Expression cnd = (Expression) treeStack.pop();

    While loop = new While(HepialF.line, cnd, body.getInstructions());
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(loop);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR ::= t_for t_ident t_from EXPR t_to EXPR t_do BODY t_endfor 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
    Block body = (Block) treeStack.pop();

    Expression to = (Expression) treeStack.pop();
    Expression from = (Expression) treeStack.pop();
    Idf id = new Idf(n);
    SymbolHEPIAL sh = SymbolTable.getInstance().identify(new Entry(n));
    if(sh == null) {
        ErrorHandler.addError("Symbol "+n+" not found", HepialF.line);
    } else {
        id.setType(sh.getType());
    }
    For loop = new For(HepialF.line, id, from, to, body.getInstructions());
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(loop);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPR ::= EXPR OPEBIN EXPR 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Expression right = (Expression) treeStack.pop();
    Expression left = (Expression) treeStack.pop();

    switch((String)op) {
        case "+":
            treeStack.push(new Addition(left, right));
            break;
        case "-":
            treeStack.push(new Substraction(left, right));
            break;
        case "*":
            treeStack.push(new Product(left, right));
            break;
        case "/":
            treeStack.push(new Division(left, right));
            break;
        case "==":
            treeStack.push(new Equal(left, right));
            break;
        case "<>":
            treeStack.push(new Different(left, right));
            break;
        case "<":
            treeStack.push(new Inferior(left, right));
            break;
        case ">":
            treeStack.push(new Superior(left, right));
            break;
        case "<=":
            treeStack.push(new InfEqual(left, right));
            break;
        case ">=":
            treeStack.push(new SupEqual(left, right));
            break;
        case "et":
            treeStack.push(new And(left, right));
            break;
        case "ou":
            treeStack.push(new Or(left, right));
            break;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPR ::= OPEUN EXPR 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Expression right = (Expression) treeStack.pop();
    if(op.equals("non")) {
        treeStack.push(new Not(right));
    } else {
        treeStack.push(new BitNot(right));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPR ::= t_openpar EXPR t_closepar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPR ::= OPERAND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ACCESS ::= t_ident 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Idf id = new Idf((String)n);
    SymbolHEPIAL sh = SymbolTable.getInstance().identify(new Entry(n));
    if(sh == null) {
        ErrorHandler.addError("Symbol "+n+" not found", HepialF.line);
    } else {
        id.setType(sh.getType());
    }
    treeStack.push(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ACCESS ::= t_ident INDICES 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Idf id = new Idf((String)n);
    SymbolHEPIAL sh = SymbolTable.getInstance().identify(new Entry(n));
    if(sh == null) {
        ErrorHandler.addError("Symbol "+n+" not found", HepialF.line);
    } else {
        id.setType(sh.getType());
    }
    treeStack.push(new ArrayAccess(id, new LinkedList<Expression>(indices)));
    indices.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INDICES ::= INDEX INDICES 
            {
              Object RESULT =null;
		
    indices.push((Expression)treeStack.pop());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDICES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INDICES ::= INDEX 
            {
              Object RESULT =null;
		
    indices.push((Expression)treeStack.pop());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDICES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INDEX ::= t_opensq EXPR t_closesq 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDEX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERAND ::= ACCESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERAND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERAND ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERAND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERAND ::= t_true 
            {
              Object RESULT =null;
		
        treeStack.push(new BoolValue(true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERAND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERAND ::= t_false 
            {
              Object RESULT =null;
		
        treeStack.push(new BoolValue(false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERAND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERAND ::= t_intConst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    treeStack.push(new NumberValue(i));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERAND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPEBIN ::= t_plus 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPEBIN ::= t_minus 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPEBIN ::= t_time 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPEBIN ::= t_div 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPEBIN ::= t_doubleq 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPEBIN ::= t_diff 
            {
              Object RESULT =null;
		 RESULT = "<>"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPEBIN ::= t_lt 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPEBIN ::= t_gt 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPEBIN ::= t_le 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPEBIN ::= t_ge 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPEBIN ::= t_and 
            {
              Object RESULT =null;
		 RESULT = "et"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPEBIN ::= t_or 
            {
              Object RESULT =null;
		 RESULT = "ou"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPEUN ::= t_not 
            {
              Object RESULT =null;
		 RESULT = "non"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEUN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPEUN ::= t_notn 
            {
              Object RESULT =null;
		 RESULT = "~"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEUN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCCALL ::= t_ident t_openpar t_closepar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Call c = new Call(HepialF.line, new Idf((String)n));
    currentBlock.getInstructions().add(c);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCCALL",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCCALL ::= t_ident t_openpar PAREFF t_closepar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    Call c = new Call(HepialF.line, new Idf((String)n), ep);
    currentBlock.getInstructions().add(c);
    ep.getParams().clear();
    Type t = SymbolTable.getInstance().identify(new Entry((String)n)).getType();
    treeStack.push(new FunctionReturn(t));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCCALL",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PAREFF ::= EXPR 
            {
              Object RESULT =null;
		
    Expression expr = (Expression) treeStack.pop();
    ep.getParams().add(expr);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAREFF",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PAREFF ::= PAREFF t_coma EXPR 
            {
              Object RESULT =null;
		
    Expression expr = (Expression) treeStack.pop();
    ep.getParams().add(expr);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAREFF",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
