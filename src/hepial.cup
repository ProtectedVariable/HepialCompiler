import java.util.*;
import ch.hepia.IL.tcp.*;
import ch.hepia.IL.tcp.types.*;
import ch.hepia.IL.tcp.tree.*;
import ch.hepia.IL.tcp.code.*;
import java.io.*;

parser code {:
    List<String> identifiers = new LinkedList<>();
    Stack<AbstractTree> treeStack = new Stack<>();
    List<Type> params = new LinkedList<>();
    List<String> pnames = new LinkedList<>();
    Function currentFunction = null;
    EffectiveParameters ep = new EffectiveParameters();
    String fname;
    Block currentBlock;
    Stack<Expression> indices = new Stack<>();
:};


non terminal AXIOM, PROGRAM, HEADER, DECLARATION, DECLARATIONS, DECLAVAR, LIDENT, DECLACONST, DECLAFONCT, TYPE, TYPEBASE, ARRAY, DIM, PARAM, BODY, INSTR, INSTRUCTIONS, READ, WRITE, ASSIGNMENT, RETURN, CONDTITION, WHILE, FOR, EXPR, ACCESS, INDEX, OPERAND, OPEBIN, OPEUN, FUNCCALL, PAREFF, INDICES;
non terminal STARTFONC; // <- To avoid reduction conflicts
terminal t_beginPrg, t_endPrg, t_prg, t_semicolon, t_coma, t_const, t_eq, t_openpar, t_closepar, t_beginfunc, t_endfunc, t_int, t_bool, t_opensq, t_closesq, t_doubledot, t_read, t_write, t_return, t_if, t_then, t_else, t_endif, t_while, t_do, t_endwhile, t_for, t_from, t_to, t_endfor, t_true, t_false, t_plus, t_minus, t_time, t_div, t_doubleq, t_diff, t_lt, t_gt, t_le, t_ge, t_and, t_or, t_notn, t_not;
terminal int t_intConst;
terminal String t_ident, t_string;

precedence left t_plus, t_minus, t_time, t_div, t_doubleq, t_diff;
precedence left t_lt, t_gt, t_le, t_ge, t_and, t_or, t_doubledot;
precedence right t_notn, t_not;

AXIOM ::= {: treeStack.push(new Axiom()); :} PROGRAM {:
    System.out.println(SymbolTable.getInstance());
    System.out.println("AbstractTree stack size "+treeStack.size());
    System.out.println(treeStack.peek());
    SemanticAnalyser.getInstance().analyze(treeStack.peek());
    if(ErrorHandler.canGenerate()) {
        String code = ByteCodeGenerator.getInstance().Generate(treeStack.peek());
        try {
            PrintWriter writer = new PrintWriter("hepial.j", "UTF-8");
            writer.println(code);
            writer.close();
            System.out.println("Bytecode was written to hepial.j");
        } catch (IOException e) {
            System.out.println("Coulnd't write bytecode to file...\n"+code);
        }
    }
:};

PROGRAM ::= HEADER DECLARATIONS t_beginPrg BODY t_endPrg {:
    Block b = (Block)treeStack.pop();
    ((Axiom)treeStack.peek()).add("main", b);
:};

HEADER ::= t_prg t_ident;

DECLARATIONS ::= DECLARATION DECLARATIONS |;
DECLARATION ::= DECLAVAR | DECLACONST | DECLAFONCT;

DECLAVAR ::= TYPE:t LIDENT:lid t_semicolon {:
    for(String str : identifiers) {
        SymbolTable.getInstance().add(new Entry(str), new Variable((Type)t, SymbolTable.getInstance().getBloc(), HepialF.line));
    }
    identifiers.clear();
:};

LIDENT ::= t_ident:t {: identifiers.add(t); :} | t_ident:t t_coma LIDENT {: identifiers.add(t); :};

DECLACONST ::= t_const TYPE:t t_ident:name t_eq EXPR t_semicolon {:
    treeStack.pop();

    if(t instanceof IntType) {
        SymbolTable.getInstance().add(new Entry((String)name), new IntConst(SymbolTable.getInstance().getBloc(), HepialF.line));
    } else if(t instanceof BoolType) {
        SymbolTable.getInstance().add(new Entry((String)name), new BoolConst(SymbolTable.getInstance().getBloc(), HepialF.line));
    }
:};

STARTFONC ::= TYPE:rt t_ident:name t_openpar {:
    fname = (String) name;
    currentFunction = new Function((Type)rt, HepialF.line);
    SymbolTable.getInstance().add(new Entry((String)name), currentFunction);
    SymbolTable.getInstance().enterBlock();
:};

DECLAFONCT ::=  STARTFONC PARAM t_closepar DECLARATIONS t_beginfunc BODY t_endfunc {:
    currentFunction.getParams().addAll(params);
    currentFunction.getPnames().addAll(pnames);
    params.clear();
    pnames.clear();
    SymbolTable.getInstance().exitBlock();
    Block b = (Block)treeStack.pop();
    ((Axiom)treeStack.peek()).add(fname, b);
:};

DECLAFONCT ::= STARTFONC t_closepar DECLARATIONS t_beginfunc BODY t_endfunc {:
    SymbolTable.getInstance().exitBlock();
    Block b = (Block)treeStack.pop();
    ((Axiom)treeStack.peek()).add(fname, b);
:};

TYPE ::= TYPEBASE:t {:
    RESULT = t;
:};

TYPE ::= ARRAY:t {:
    RESULT = t;
:};

TYPEBASE ::= t_int:t  {: RESULT = IntType.getInstance(); :} | t_bool:t  {: RESULT = BoolType.getInstance(); :};

ARRAY ::= TYPEBASE:t t_opensq DIM t_closesq {:
    /*
    if(t instanceof IntType) {
        RESULT = Type.INTEGERARRAY;
    } else if(t instanceof BoolType) {
        RESULT = Type.BOOLEANARRAY;
    }
    *///TODO
   RESULT = t;
:};

DIM ::= EXPR t_doubledot EXPR | DIM t_coma EXPR t_doubledot EXPR;

PARAM ::= TYPE:t t_ident:name {: params.add((Type)t); pnames.add((String)name); SymbolTable.getInstance().add(new Entry((String)name), new Variable((Type)t, SymbolTable.getInstance().getBloc(), HepialF.line)); :}
| PARAM t_coma TYPE:t t_ident:name {: params.add((Type)t); pnames.add((String)name); SymbolTable.getInstance().add(new Entry((String)name), new Variable((Type)t, SymbolTable.getInstance().getBloc(), HepialF.line)); :};

BODY ::= {: currentBlock = new Block(HepialF.line); treeStack.push(currentBlock); :} INSTRUCTIONS;
INSTRUCTIONS ::= INSTR INSTRUCTIONS |;
INSTR ::= ASSIGNMENT | WRITE | READ | CONDTITION | RETURN | WHILE | FOR;

READ ::= t_read t_ident:n t_semicolon {:
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(new Read(HepialF.line, new Idf((String)n)));
:};

WRITE ::= t_write EXPR t_semicolon {:
    Expression content = (Expression) treeStack.pop();
    Write write = new Write(HepialF.line, content);
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(write);
:};

WRITE ::= t_write t_string:s t_semicolon {:
    Write write = new Write(HepialF.line, (String)s);
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(write);
:};

ASSIGNMENT ::= ACCESS t_eq EXPR t_semicolon {:
    //EXPR
    Expression source = (Expression) (treeStack.pop());
    //ACCESS
    Idf dest = (Idf) (treeStack.pop());
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(new Assignment(HepialF.line, source, dest));
:};

RETURN ::= t_return EXPR t_semicolon {:
    Expression e = (Expression) treeStack.pop();
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(new Return(HepialF.line, e));
:};

CONDTITION ::= t_if EXPR t_then BODY t_else BODY t_endif {:
    Block _else = (Block) treeStack.pop();
    Block then = (Block) treeStack.pop();
    Expression cnd = (Expression) treeStack.pop();

    Condition cond = new Condition(HepialF.line, cnd, then.getInstructions(), _else.getInstructions());
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(cond);
:};

WHILE ::= t_while EXPR t_do BODY t_endwhile {:
    Block body = (Block) treeStack.pop();
    Expression cnd = (Expression) treeStack.pop();

    While loop = new While(HepialF.line, cnd, body.getInstructions());
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(loop);
:};

FOR ::= t_for t_ident:n t_from EXPR t_to EXPR t_do BODY t_endfor {:
    Block body = (Block) treeStack.pop();

    Expression to = (Expression) treeStack.pop();
    Expression from = (Expression) treeStack.pop();
    Idf id = new Idf(n);
    SymbolHEPIAL sh = SymbolTable.getInstance().identify(new Entry(n));
    if(sh == null) {
        ErrorHandler.addError("Symbol "+n+" not found", HepialF.line);
    } else {
        id.setType(sh.getType());
    }
    For loop = new For(HepialF.line, id, from, to, body.getInstructions());
    Block currentBlock = (Block)treeStack.peek();
    currentBlock.getInstructions().add(loop);
:};

EXPR ::= EXPR OPEBIN:op EXPR {:
    Expression right = (Expression) treeStack.pop();
    Expression left = (Expression) treeStack.pop();

    switch((String)op) {
        case "+":
            treeStack.push(new Addition(left, right));
            break;
        case "-":
            treeStack.push(new Substraction(left, right));
            break;
        case "*":
            treeStack.push(new Product(left, right));
            break;
        case "/":
            treeStack.push(new Division(left, right));
            break;
        case "==":
            treeStack.push(new Equal(left, right));
            break;
        case "<>":
            treeStack.push(new Different(left, right));
            break;
        case "<":
            treeStack.push(new Inferior(left, right));
            break;
        case ">":
            treeStack.push(new Superior(left, right));
            break;
        case "<=":
            treeStack.push(new InfEqual(left, right));
            break;
        case ">=":
            treeStack.push(new SupEqual(left, right));
            break;
        case "et":
            treeStack.push(new And(left, right));
            break;
        case "ou":
            treeStack.push(new Or(left, right));
            break;
    }
:};

EXPR ::= OPEUN:op EXPR {:
    Expression right = (Expression) treeStack.pop();
    if(op.equals("non")) {
        treeStack.push(new Not(right));
    } else {
        treeStack.push(new BitNot(right));
    }
:};

EXPR ::= t_openpar EXPR t_closepar;
EXPR ::=  OPERAND;

ACCESS ::= t_ident:n {:
    Idf id = new Idf((String)n);
    SymbolHEPIAL sh = SymbolTable.getInstance().identify(new Entry(n));
    if(sh == null) {
        ErrorHandler.addError("Symbol "+n+" not found", HepialF.line);
    } else {
        id.setType(sh.getType());
    }
    treeStack.push(id);
:};

ACCESS ::= t_ident:n INDICES:i {:
    List<Expression> ids = (List<Expression>) i;
    Idf id = new Idf((String)n, ids);
:};

INDICES ::= INDEX INDICES {:
    //indices.push(treeStack.pop()); //TODO
:};

INDICES ::= INDEX {:
    //indices.push(treeStack.pop()); //TODO
:};

INDEX ::= t_opensq EXPR t_closesq;

OPERAND ::= ACCESS | FUNCCALL;
OPERAND ::= t_true {:
        treeStack.push(new BoolValue(true));
:};
OPERAND ::= t_false {:
        treeStack.push(new BoolValue(false));
:};
OPERAND ::= t_intConst:i {:
    treeStack.push(new NumberValue(i));
:};

OPEBIN ::= t_plus {: RESULT = "+"; :} | t_minus  {: RESULT = "-"; :} | t_time  {: RESULT = "*"; :} | t_div  {: RESULT = "/"; :} | t_doubleq  {: RESULT = "=="; :} | t_diff  {: RESULT = "<>"; :} | t_lt {: RESULT = "<"; :} | t_gt  {: RESULT = ">"; :} | t_le  {: RESULT = "<="; :} | t_ge  {: RESULT = ">="; :} | t_and {: RESULT = "et"; :} | t_or {: RESULT = "ou"; :};

OPEUN ::= t_not {: RESULT = "non"; :} | t_notn {: RESULT = "~"; :};

FUNCCALL ::= t_ident:n t_openpar t_closepar {:
    Call c = new Call(HepialF.line, new Idf((String)n));
    currentBlock.getInstructions().add(c);
:};

FUNCCALL ::= t_ident:n t_openpar PAREFF t_closepar {:
    Call c = new Call(HepialF.line, new Idf((String)n), ep);
    currentBlock.getInstructions().add(c);
    ep.getParams().clear();
    Type t = SymbolTable.getInstance().identify(new Entry((String)n)).getType();
    treeStack.push(new FunctionReturn(t));
:};

PAREFF ::= EXPR {:
    Expression expr = (Expression) treeStack.pop();
    ep.getParams().add(expr);
:};

PAREFF ::= PAREFF t_coma EXPR {:
    Expression expr = (Expression) treeStack.pop();
    ep.getParams().add(expr);
:};
